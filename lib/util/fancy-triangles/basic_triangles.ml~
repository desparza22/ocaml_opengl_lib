open Tgl3
open! Core
open Result.Let_syntax

(* no optimization for shared vertices *)


module Update = struct
  type t =
    | Vertex
    | Color
end

module Sub = struct
  type t = {
      num_triangles : int;
      id : int;
      indices_id : int;
      (* 0 to number of vertices minus 1 *)
      indices : (int, Bigarray.int16_unsigned_elt) Bigarray_wrapper.t;
      vertices_id : int;
      triangle_vertices : Triangle_array.t;
      colors_id : int;
      triangle_colors : Triangle_array.t
    }
         
  let create_fun num_triangles vertices_f colors_f =
    let store_res = Bigarray.Array1.create Bigarray.int32 Bigarray.c_layout 1 in

    Gl.gen_vertex_arrays 1 store_res;
    
    let id = Int32.to_int_exn store_res.{0} in

    (* indices *)
    Gl.gen_buffers 1 store_res;
    let indices_id = Int32.to_int_exn store_res.{0} in
    Gl.bind_buffer Gl.array_buffer indices_id;
    let indices = Bigarray_wrapper.from_fun Bigarray.int16_unsigned (num_triangles * 3) Fn.id in
    Gl.buffer_data Gl.array_buffer (Gl.bigarray_byte_size indices.data) (Some indices.data) Gl.static_draw;

    (* vertices *)
    Gl.gen_buffers 1 store_res;
    let vertices_id = Int32.to_int_exn store_res.{0} in
    Gl.bind_buffer Gl.array_buffer vertices_id;
    let vertices = Triangle_array.create num_triangles in
    Triangle_array.fill_f vertices vertices_f;
    Gl.buffer_data Gl.array_buffer (Gl.bigarray_byte_size vertices.data.data.data) (Some vertices.data.data.data) Gl.dynamic_draw;

    (* colors *)
    Gl.gen_buffers 1 store_res;
    let colors_id = Int32.to_int_exn store_res.{0} in
    Gl.bind_buffer Gl.array_buffer colors_id;
    let colors = Triangle_array.create num_triangles in
    Triangle_array.fill_f colors colors_f;
    Gl.buffer_data Gl.array_buffer (Gl.bigarray_byte_size colors.data.data.data) (Some colors.data.data.data) Gl.dynamic_draw;

    (* bind everything to id *)
    Gl.bind_vertex_array id;
    (* indices *)
    Gl.bind_buffer Gl.element_array_buffer indices_id;
    (* vertices *)
    Gl.bind_buffer Gl.array_buffer vertices_id;
    Gl.enable_vertex_attrib_array 0;
    Gl.vertex_attrib_pointer 0 3 Gl.float false 0 (`Offset 0);
    (* colors *)
    Gl.bind_buffer Gl.array_buffer colors_id;
    Gl.enable_vertex_attrib_array 1;
    Gl.vertex_attrib_pointer 1 3 Gl.float false 0 (`Offset 0);

    (* reset bindings *)
    Gl.bind_vertex_array 0;
    Gl.bind_buffer Gl.array_buffer 0;
    Gl.bind_buffer Gl.element_array_buffer 0;

    (* return t *)
    {num_triangles; id;
     indices_id; indices;
     vertices_id; triangle_vertices = vertices;
     colors_id; triangle_colors = colors}


  let draw t program_id =
    (* vertices *)
    Gl.bind_buffer Gl.array_buffer t.vertices_id;
    Gl.buffer_data
      Gl.array_buffer
      (Gl.bigarray_byte_size
         t.triangle_vertices.data.data.data)
      (Some t.triangle_vertices.data.data.data)
      Gl.dynamic_draw;

    (* colors *)
    Gl.bind_buffer Gl.array_buffer t.colors_id;
    Gl.buffer_data
      Gl.array_buffer
      (Gl.bigarray_byte_size
         t.triangle_colors.data.data.data)
      (Some t.triangle_colors.data.data.data)
      Gl.dynamic_draw;
    
    Gl.use_program program_id;
    Gl.bind_vertex_array t.id;
    Gl.draw_elements
      Gl.triangles
      (3 * t.triangle_vertices.size)
      Gl.unsigned_short
      (`Offset 0);
    Gl.bind_vertex_array 0;
    ()
    
  let update t idx triangle update =
    let updating = 
      match update with
      | Update.Vertex -> t.triangle_vertices
      | Update.Color -> t.triangle_colors in
    Triangle_array.set updating ~idx ~triangle
    
end

(* indexed by shorts, at most ~65000 indices.
   three indices per triangle, so at most ~20000 triangles *)
let triangles_per_subarray = 20000

type t = {
    pid : int;
    num_triangles : int;
    sub_triangles : Sub.t array
  }

let create_program () =
  let%bind vid =
    Shaders.compile_shader
      Shaders.Standard.vertex_shader_color4 Gl.vertex_shader in
  let%bind fid =
    Shaders.compile_shader
      Shaders.Standard.fragment_shader Gl.fragment_shader in
  (*let%bind gid =
    Shaders.compile_shader
      Shaders.Multi_transform.geometry_shader Gl.geometry_shader in*)
  let pid = Gl.create_program () in
  let get_program pid e = Helper.get_int (Gl.get_programiv pid e) in
  Gl.attach_shader pid vid; Gl.delete_shader vid;
  Gl.attach_shader pid fid; Gl.delete_shader fid;
  (*Gl.attach_shader pid gid; Gl.delete_shader gid;*)
  (*Gl.bind_attrib_location pid 0 "transformation";*)
  Gl.bind_attrib_location pid 0 "vertex";
  Gl.bind_attrib_location pid 1 "color";
  Gl.link_program pid;
  
  if get_program pid Gl.link_status = Gl.true_
  then Ok pid
  else
    let len = get_program pid Gl.info_log_length in
    let log = Helper.get_string len (Gl.get_program_info_log pid len None) in
    (Gl.delete_program pid; Error (`Msg log))


let create_fun num_triangles vertices_f colors_f =
  match create_program () with
  | Error (`Msg msg) ->
     raise (Invalid_argument (Printf.sprintf "%s" msg))
  | Ok pid ->
     let num_subs = (num_triangles - 1) / triangles_per_subarray + 1 in
     let sub_triangles =
       Array.init
         num_subs
         ~f:(fun sub_num ->
           let sub_num_triangles =
             if Int.equal sub_num (num_subs - 1) &&
                  (not (Int.equal
                          (num_triangles mod
                             triangles_per_subarray)
                          0))
             then
               num_triangles mod triangles_per_subarray
             else
               triangles_per_subarray in
           
           let start_idx =
             triangles_per_subarray * sub_num in
           let shifted_vertices_f =
             (fun idx ->
               vertices_f (idx + start_idx)) in
           let shifted_colors_f =
             (fun idx -> colors_f (idx + start_idx)) in
           Sub.create_fun
             sub_num_triangles
             shifted_vertices_f
             shifted_colors_f) in
     {pid; num_triangles; sub_triangles}

let draw t pid =
  Gl.clear_color 0. 0. 0. 1.;
  Gl.clear Gl.color_buffer_bit;
  Array.iter
    t.sub_triangles
    ~f:(fun sub -> Sub.draw sub pid)

let update t idx triangle update =
  let sub_num = idx / triangles_per_subarray in
  let idx_in_sub = idx mod triangles_per_subarray in
  Sub.update
    t.sub_triangles.(sub_num)
    idx_in_sub
    triangle
    update
