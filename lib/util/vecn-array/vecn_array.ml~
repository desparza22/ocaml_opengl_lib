open Mat_vec
open! Core

type t =
  {
    n : int;
    data : (float, Bigarray.float32_elt) Bigarray_wrapper.t;
    size : int}

let create size n =
  {n;
   data = Bigarray_wrapper.create
            Bigarray.float32 (size * n);
   size}

let raise_out_of_bounds t ~idx =
  raise
    (Invalid_argument
       (Printf.sprintf
          "Index out of bounds: passed in %d and size is %d\n"
          idx t.size))

let set t ~idx ~(vecn : Vec.t) =
  Helper.do_n_i
    (fun n_ ->
      match Bigarray_wrapper.set
                t.data
                ~idx:(idx * t.n + n_)
                ~elem:(vecn.(n_)) with
      | Ok () -> ()
      | Error Index_out_of_bounds ->
         raise_out_of_bounds t ~idx)
    t.n

let fill_f t f =
  Helper.do_n_i
    (fun idx ->
      ignore (set t ~idx ~vecn:(f idx)))
    t.size

let get t ~idx =
  Array.init
    t.n
    ~f:(fun n_ ->
      match Bigarray_wrapper.get
              t.data ~idx:(idx * t.n + n_) with
      | Ok value ->
         value
      | Error Index_out_of_bounds ->
         raise_out_of_bounds t ~idx)
