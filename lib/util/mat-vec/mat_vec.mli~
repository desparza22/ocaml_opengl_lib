open! Core

module Vec : sig

  type t = Float.t array

  val size : t -> int

  val map2 : (Float.t -> Float.t -> Float.t) -> t -> t  -> t

  val dot : t -> t -> Float.t

  val cross : t -> t -> t

  val mult : t -> t -> t

  val neg : t -> t

  val add : t -> t -> t

  val sub : t -> t -> t

  val scale : t -> Float.t -> t

  val magnitude_sqrd : t -> Float.t

  val magnitude : t -> Float.t

  val normalize : t -> (t, string) Result.t

  val normalize_exn : t -> t

  val average : t -> t -> t

  val to_string : t -> string

  val homogeneous_point : t -> t

  val homogeneous_vector : t -> t

  val of_homogeneous : t -> t

  val random_within_unit : unit -> t

  module Op : sig
    type nonrec t =
      Add of t
    | Sub of t

    val add_sub : size:int -> t list -> float array
  end

                              (*val project : start:t -> dir:t -> onto:t -> t*)

end


module Mat : sig

  type t = Float.t array array

  val init_f : int -> (int -> int -> Float.t) -> t

  val mult_m : t -> t -> t

  val mult_v : t -> Vec.t -> Vec.t

  val identity : unit -> t

end

               
module Transform : sig

  module Axis : sig
    type t = X | Y | Z
  end

  val rotation : Axis.t -> Float.t -> Mat.t

  val translation : Vec.t -> Mat.t

  val scaling : Vec.t -> Mat.t

  module Op : sig
    type nonrec t =
      | Rotate of Axis.t * Float.t
      | Translate of Vec.t
      | Scale of Vec.t

    val transform : t list -> Mat.t
  end
end
