open! Mat_vec
open! Core

module Circle = struct
  type t = {
      center : Vec.t;
      radius : Float.t
    }

  (* tan theta = y / x 
     theta = arctan (y / x)
   *)
  let theta_of_point t point =
    let x = point.(0) -. t.center.(0) in
    let y = point.(1) -. t.center.(1) in
    match Helper.float_near_zero x with
    | false ->
       Float.atan2 y x
    | true ->
       match Helper.float_gt y 0. with
       | true -> Float.pi /. 2.
       | false -> Float.pi *. 3. /. 2.

  let point_along t theta =
    let x = t.radius *. (Float.cos theta) in
    let y = t.radius *. (Float.sin theta) in
    [|t.center.(0) +. x;
      t.center.(1) +. y;
      0.|]
end

type t = Draw_container.t

let create vert geom frag () =
  let fields =
    [Draw_container.Field.{name="center"; floats=2};
     Draw_container.Field.{name="radius"; floats=1};
     Draw_container.Field.{name="color"; floats=3}] in
  let primitive = Draw_container.Primitive.Points in
  Draw_container.create
    fields primitive vert geom frag ()

let draw = Draw_container.draw

let clear = Draw_container.clear

let add_circle (t : t) ~center ~radius ~color =
  let getter i =
    if i < 2
    then center.(i)
    else
      (if i < 3
       then radius
       else color.(i - 3)) in
  Draw_container.add_entry t getter



(*
let center_floats = 2
let radius_floats = 1
let color_floats = 3

let floats_per_entry =
  center_floats + radius_floats + color_floats

let create pid =
  let store_res =
    Bigarray.Array1.create
      Bigarray.int32
      Bigarray.c_layout 1 in

  Gl.gen_vertex_arrays 1 store_res;
  let id = Int32.to_int_exn store_res.{0} in

  (*data*)
  Gl.gen_buffers 1 store_res;
  let data_id =
    Int32.to_int_exn store_res.{0} in
  Gl.bind_buffer Gl.array_buffer data_id;
  let data_capacity = 1000 in
  let data =
    Bigarray_wrapper.create
      Bigarray.float32
      (data_capacity * floats_per_entry) in

  Gl.bind_vertex_array id;
  Gl.bind_buffer Gl.array_buffer data_id;
  Gl.enable_vertex_attrib_array 0;
  Gl.vertex_attrib_pointer
    0 2 Gl.float false (floats_per_entry * 4) (`Offset 0);
  Gl.enable_vertex_attrib_array 1;
  Gl.vertex_attrib_pointer
    1 1 Gl.float false (floats_per_entry * 4) (`Offset (2 * 4));
  Gl.enable_vertex_attrib_array 2;
  Gl.vertex_attrib_pointer
    2 3 Gl.float false (floats_per_entry * 4) (`Offset (3 * 4));

  Gl.bind_vertex_array 0;
  Gl.bind_buffer Gl.array_buffer 0;
  Gl.bind_buffer Gl.element_array_buffer 0;

  {
    pid;
    num_circles=0;
    id;
    data_id;
    data;
    data_capacity;
  }

let draw t =
  Gl.bind_buffer Gl.array_buffer t.data_id;

  Gl.buffer_data
    Gl.array_buffer
    (Gl.bigarray_byte_size
       t.data.data)
    (Some t.data.data)
    Gl.static_draw;

  Gl.use_program t.pid;
  Gl.bind_vertex_array t.id;
  Gl.draw_arrays
    Gl.points
    0
    t.num_circles;
  Gl.bind_vertex_array 0
    
let clear t =
  t.num_circles <- 0

let expand_capacity t =
  let new_capacity = t.data_capacity * 2 in
  let new_data =
    Bigarray_wrapper.create
      Bigarray.float32
      (new_capacity * floats_per_entry) in
  Helper.do_n_i
    (fun idx ->
      match Bigarray_wrapper.get t.data ~idx with
      | Ok elem ->
         ignore
           ((Bigarray_wrapper.set
              new_data
              ~idx
              ~elem)
            : (unit, Bigarray_wrapper.Error_type.t) result)
      | _ ->
         raise
           (Invalid_argument "shouldn't raise"))
    (t.num_circles * floats_per_entry);

  t.data <- new_data;
  t.data_capacity <- new_capacity

let add_circle t ~center ~radius ~color =
  (if Int.equal t.num_circles t.data_capacity
   then expand_capacity t);
  let idx = t.num_circles in
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry)
       ~elem:(center.(0))
     : (unit, Bigarray_wrapper.Error_type.t) result));
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry + 1)
       ~elem:(center.(1))
     : (unit, Bigarray_wrapper.Error_type.t) result));
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry + 2)
       ~elem:radius)
    : (unit, Bigarray_wrapper.Error_type.t) result);
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry + 3)
       ~elem:color.(0))
    : (unit, Bigarray_wrapper.Error_type.t) result);
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry + 4)
       ~elem:color.(1))
    : (unit, Bigarray_wrapper.Error_type.t) result);
  ignore
    ((Bigarray_wrapper.set
       t.data
       ~idx:(idx * floats_per_entry + 5)
       ~elem:color.(2))
    : (unit, Bigarray_wrapper.Error_type.t) result);
  
  t.num_circles <- idx + 1

 *)
